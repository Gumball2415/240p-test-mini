;
; Game Boy Color-exclusive tests for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"

  rsset hTestState
curhelpsect rb 1
curpalette rb 1
curvolume rb 1
cur_lcdc rb 1
need_sgb_update rb 1

; Game Boy Color tests menu ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
section "gbctestmenu", ROM0
activity_about_gbc_tests:
  ld a,PADF_A|PADF_B|PADF_START|PADF_LEFT|PADF_RIGHT
  ld b,helpsect_color_tests
  jp helpscreen

;;
; An additional menu of tests for SGB or GBC
activity_gbc_tests_menu::
  ; First ensure that the machine is SGB or GBC.
  ldh a,[hw_capability]
  or a
  jr z, activity_about_gbc_tests

.loop:
  ld b, helpsect_color_tests_menu
  ldh a, [hw_capability]
  rra
  jr nc, .have_help_page_id
    ld b, helpsect_sgb_color_tests_menu
  .have_help_page_id:
  ld a,PADF_A|PADF_B|PADF_START|PADF_DOWN|PADF_UP|PADF_LEFT|PADF_RIGHT
  call helpscreen

  ; B to return to the main menu
  ldh a, [new_keys]
  ld d, a
  and PADF_B
  ret nz

  ; Save menu selection and get the index into the handler list
  ld a,[help_wanted_page]
  ld c,a
  ld a,[help_cursor_y]
  ld b,a
  push bc

  ; Start does About instead of what is selected
  bit PADB_START, d
  jr z,.not_start
    call activity_about_gbc_tests
    jr .skip_activity
  .not_start:

  ; Get the handler for this activity
  ld de,color_handlers
  ld b, a
  ldh a, [hw_capability]
  rra
  ld a, b
  jr nc, .have_activity_id
    add (super_handlers - color_handlers) / 2
  .have_activity_id:
  call jumptable_de_a
.skip_activity:

  ; Restore menu selection
  pop bc
  ld a,b
  ld [help_cursor_y],a
  ld a,c
  ld [help_wanted_page],a
  jr .loop

color_handlers:
  dw activity_pluge
  dw activity_gradient_bars
  dw activity_smpte_bars
  dw activity_barsongray
  dw activity_color_bleed
super_handlers:
  dw activity_pluge
  dw activity_barsongray
  dw activity_color_bleed
  dw sgb_ntsc_test

; PLUGE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "pluge", ROM0
pluge_sgb_rects:
  db $04*8+1  ; 1 packet holds up to 2 rectangles
  db 2        ; number of rectangles

  db %00000111  ; bit 0: inside, 1: border, 2: outside
  db %00001010  ; inside and border to palette 2, outside to palette 0
  db 10, 0, 19, 17  ; right half of screen

  db %00000011
  db %00001111  ; inside and border to palette 3
  db 10, 13, 19, 17  ; bottom right

  db 0, 0

activity_pluge:
  xor a
  ldh [curpalette],a
  ldh [curvolume],a  ; 1: shark; 0: pluge
.restart:
  call clear_gbc_attr

  ; Load PLUGE tiles
  call load_common_obj_tiles
  ld hl,CHRRAM0+4*16+1
  ld b,8
  ld a,$FF
  .remap8:
    ld [hl+],a
    inc l
    dec b
    jr nz,.remap8

  ; Load shark tiles
  ld hl,CHRRAM0+32*16
  ld de,pluge_shark_chr
  ld b,16
  call pb16_unpack_block

  ; Load main map
  ld de,pluge_rowmap
  ldh a, [hw_capability]
  rra
  jr nc,.not_sgb_alt_map
    ld hl, pluge_sgb_rects
    call sgb_send
    ld de, pluge_sgb_rowmap
  .not_sgb_alt_map:
  call smpte_load_map_SCRN0
  ld hl,pluge_palette_common
  ld bc,8*256+low(rBCPS)
  ld a,$88
  call set_gbc_palette

  ; Load shark map (all palette 0)
  ld hl,_SCRN1
  ld b,18
  ld a,$20
  .sharkmaprowloop:
    ld c,32
    .sharkmaptileloop:
      ld [hl+],a
      add 4
      and $2F
      dec c
      jr nz,.sharkmaptileloop
    inc a
    and $23
    dec b
    jr nz,.sharkmaprowloop

  ld a,%11100100
  ldh [rBGP], a
  ldh [rLYC], a  ; disable lyc irq
  ld a,LCDCF_ON|BG_NT0|BG_CHR01
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a
  ldh a, [hw_capability]
  ldh [need_sgb_update], a

.loop:
  ld b,helpsect_pluge
  call read_pad_help_check
  jr nz,.restart

  ldh a,[new_keys]
  ld b,a
  bit PADB_B,b  ; B: exit
  ret nz

  bit PADB_A,b  ; A: toggle palette
  jr z,.notogglepalette
    ld c,2
    ldh a,[curvolume]
    or a
    jr z,.only_two_palettes
      ld c,5
    .only_two_palettes:
    ldh a,[curpalette]
    inc a
    cp c
    jr c,.no_palette_wraparound
      xor a
    .no_palette_wraparound:
    ldh [curpalette],a
    jr .schedule_sgb_update
  .notogglepalette:

  bit PADB_SELECT,b  ; Select: toggle background type
  jr z,.notogglebgtype
    ldh a,[curvolume]
    xor 1
    ldh [curvolume],a
    xor a
    ldh [curpalette],a
  .schedule_sgb_update:
    ldh a, [hw_capability]
    ldh [need_sgb_update], a
  .notogglebgtype:
  ldh a,[curvolume]
  add a
  add a
  add a  ; bit 3: SCRN0 or SCRN1
  or LCDCF_ON|BG_NT0|BG_CHR01
  ldh [vblank_lcdc_value],a

  rst wait_vblank_irq

  ; Load palette and tiles
  ld de,pluge_palette_ntsc
  ldh a,[curvolume]
  or a
  jr z,.not_load_shark_palette
    ld de,pluge_shark_palette
  .not_load_shark_palette:
  ld a,[curpalette]

  ; DE: which palette set to use; A: which entry in the set
  ld h,0
  add a
  add a
  add a
  ld l,a
  add hl,de
  ld a,$80
  ld bc,(1*8)*256+low(rBCPS)
  call set_gbc_palette

  ldh a, [need_sgb_update]
  rra
  jr nc, .no_sgb_update
    ldh a, [curpalette]
    add 28
    ld b, a
    ld c, a
    ld d, a
    ld e, a
    xor a
    ldh [need_sgb_update], a

    ldh a, [curvolume]
    or a
    jr nz,.sgb_not_shark_palette
      dec b
      dec b
      ld de, $1819
    .sgb_not_shark_palette:
    call sgb_set_palettes_bcde
  .no_sgb_update:

  jr .loop

; Gradient color bars ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "gradientbars", ROM0
gradient_objpalette:
  drgb $000000
  drgb $080000
  drgb $100000
  drgb $180000
  drgb $000000
  drgb $000800
  drgb $001000
  drgb $001800
  drgb $000000
  drgb $000008
  drgb $000010
  drgb $000018
  drgb $000000
  drgb $080808
  drgb $101010
  drgb $181818

gradient_labels:
  db  32,  8,"0",10
  db  48,  8,"2",10
  db  64,  8,"4",10
  db  80,  8,"6",10
  db  96,  8,"8",10
  db 112,  8,"A",10
  db 128,  8,"C",10
  db 144,  8,"E",10
  db   4, 16,"Red",10
  db   4, 48,"Green",10
  db   4, 80,"Blue",10
  db   4,112,"White",0

activity_gradient_bars:
  ld a,LCDCF_ON|BG_NT0|BG_CHR01|LCDCF_OBJON
  ldh [cur_lcdc],a
.restart:
  call clear_gbc_attr

  ; Load tiles and map
  call load_smpte_tiles
  ld de,gradient_rowmap
  call smpte_load_map_SCRN0
  ld hl,_SCRN1
  ld de,gradient_rowmap
  call smpte_load_map
  call gradient_load_oam
  ld de,(CHRRAM0 >> 4)|$20
  ld hl,gradient_labels
  call vwfDrawLabels
  
  ; Add grid to map
  ld hl,_SCRN1
  ld bc,65536-32*18
  .addgridloop:
    ld a,[hl]
    or a
    jr nz,.addgridnz
      ld a,$0C  ; grid tile
    .addgridnz:
    ld [hl+],a
    inc c
    jr nz,.addgridloop
    inc b
    jr nz,.addgridloop

  ld a,IEF_LCDC|IEF_VBLANK
  ldh [rIE],a
  ld a,STATF_LYC
  ldh [rSTAT],a
  ld a,%11110111  ; Set color 0 for backdrop area
  call set_bgp
  ldh [rLYC],a  ; Disable until first vblank

  ld hl,gradient_objpalette
  ld bc,32*256+low(rOCPS)
  ld a,$80
  call set_gbc_palette

.loop:
  ldh a,[cur_lcdc]
  ldh [vblank_lcdc_value],a
  ldh [stat_lcdc_value],a
  ldh [rLCDC],a
  ld b,helpsect_gradient_color_bars
  call read_pad_help_check
  jr nz,.restart

  ldh a,[new_keys]
  ld b,a
  bit PADB_B,b
  ret nz
  bit PADB_A,b
  jr z,.not_toggle_grid
    ldh a,[cur_lcdc]
    xor LCDCF_BG9C00
    ldh [cur_lcdc],a
  .not_toggle_grid:

  rst wait_vblank_irq
  ld a,8
  ld de,%000000000000001
  call gradient_push_palette
  ld a,40
  ld de,%000000000100000
  call gradient_push_palette
  ld a,72
  ld de,%000010000000000
  call gradient_push_palette
  ld a,104
  ld de,%000010000100001
  call gradient_push_palette
  jr .loop

gradient_load_oam:
  ld hl,SOAM
  ld de,$18FF
  call .threepairpair
  call .threepairpair
  ld a,l
  ld [oam_used],a
  call lcd_clear_oam
  jp run_dma
.threepairpair:
  call .threepair
.threepair:
  ld a,d
  add 8
  ld d,a
  inc e
  call .onepair
  call .onepair
.onepair:
  ld a,d    ; y position
  ld [hl+],a
  ld a,32+8 ; x position
  ld [hl+],a
  ld a,$07  ; tile number
  ld [hl+],a
  ld a,e    ; attribute
  ld [hl+],a
  ld a,d
  ld [hl+],a
  add 8
  ld d,a
  ld a,40+8
  ld [hl+],a
  ld a,$08
  ld [hl+],a
  ld a,e    
  ld [hl+],a
  ret

gradient_push_palette:
  ; Prepare to wait for scanline A
  di
  ld b,a
  ldh [rLYC],a  ; Set scanline to wait for: tile row above transition
  ld a,STATF_LYC
  ldh [rSTAT],a

  ; Construct initial color
  ld h,d
  ld l,e
  add hl,hl
  add hl,hl
  ld bc,7*256+low(rBCPD)
  ld a,$88
  ldh [rBCPS],a  ; seek in palette memory

  halt  ; Wait for LY=LYC
  
  ; Now get ready to wait for hblank interrupts
  ld a,STATF_MODE00
  ldh [rSTAT],a
  .lineloop:
    xor a
    ldh [rIF],a
    halt
    rept 4
      ld a,l
      ld [$FF00+c],a
      ld a,h
      ld [$FF00+c],a
      add hl,de
    endr
    dec b
    jr nz,.lineloop
  ld a,STATF_LYC
  ldh [rSTAT],a
  reti

; SMPTE color bars & Color bars on gray ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "smpteloader", ROM0
smpte_rowdata:
  db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00, $00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ; color 0
  db $03,$03,$04,$02,$02,$05,$01,$01,$06,$00, $10,$19,$11,$11,$1A,$12,$12,$1B,$13,$13  ; SMPTE1
  db $23,$23,$24,$22,$22,$25,$21,$21,$26,$20, $30,$39,$31,$31,$3A,$32,$32,$3B,$33,$33  ; SMPTE2
  db $43,$43,$43,$C8,$42,$42,$42,$41,$41,$41, $C7,$40,$40,$40,$51,$50,$52,$50,$50,$50  ; SMPTE3
  db $13,$13,$14,$12,$12,$15,$11,$11,$16,$10, $00,$09,$01,$01,$0A,$02,$02,$0B,$03,$03  ; SMPTE1 flipped
  db $00,$00,$00,$00,$02,$02,$17,$18,$27,$28, $37,$38,$47,$48,$57,$58,$67,$68,$77,$78  ; gradient
  db $00,$00,$01,$01,$00,$00,$04,$04,$00,$00, $13,$13,$13,$13,$13,$13,$13,$13,$00,$00  ; pluge 1
  db $00,$00,$01,$01,$00,$00,$04,$04,$00,$00, $12,$12,$12,$12,$12,$12,$12,$12,$00,$00  ; pluge 2
  db $00,$00,$01,$01,$00,$00,$04,$04,$00,$00, $11,$11,$11,$11,$11,$11,$11,$11,$00,$00  ; pluge 3
  db $00,$00,$01,$01,$00,$00,$04,$04,$00,$00, $10,$10,$10,$10,$10,$10,$10,$10,$00,$00  ; pluge 4
  db $01,$02,$03,$92,$91,$21,$22,$23,$B2,$B1, $41,$42,$43,$D2,$D1,$61,$62,$63,$F2,$F1  ; gbc gray ramp top
  db $71,$72,$73,$E2,$E1,$51,$52,$53,$C2,$C1, $31,$32,$33,$A2,$A1,$11,$12,$13,$82,$81  ; gbc gray ramp bottom
  db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03, $03,$03,$03,$03,$03,$03,$03,$03,$03,$03  ; color 3

smpte_rowmap:
  db $B1,$22,$53,$00
ongray_rowmap:
  db $3C,$41,$4C,$44,$3C,$00
gradient_rowmap:
  db $20,$35,$10,$35,$10,$35,$10,$35,$10,$00
pluge_rowmap:
  db $10,$46,$47,$48,$49,$10,$00
pluge_sgb_rowmap:
  db $10,$46,$47,$88,$10,$00
gray_ramp_rowmap::
  db $10,$8A,$8B,$10,$00

smpte_load_map_SCRN0::
  ld hl, _SCRN0

;;
; @param DE pointer to rowmap
; @param HL pointer to _SCRN0 or _SCRN1
smpte_load_map::
.rowgrploop:
  ld a,[de]  ; A: which row
  inc de
  or a
  ret z
  push de
  push af  ; Stack: height, rowmap pos

  ; Set DE to smpte_rowdata[A & 0x0F]
  and $0F
  ld e,a
  add a  ; row*2
  add a  ; row*4
  add e  ; row*5
  ld de,smpte_rowdata
  add a  ; row*10
  add a  ; row*20
  jr nc,.rowdata_nowrap1  ; 13 to 15 times 20 exceeds 256
    inc d
  .rowdata_nowrap1:
  add e
  jr nc,.rowdata_nowrap2
    inc d
  .rowdata_nowrap2:
  ld e,a

  pop af  ; Stack: rowmap pos
  swap a
  and $0F
  ld b,a   ; B: height of this segment in rows; DE: src; HL: dst
  ld c,20
  .rowloop:
    push de
    push bc   ; Stack: height, rowdata start, rowmap pos
    .byteloop:
      ; Copy the attribute
      ld a,1
      ldh [rVBK],a
      ld a,[de]  ; A[7]: hflip; A[6:4]: palette
      swap a
      and $0F
      bit 3,a
      jr z,.nb3
        xor %00101000  ; move bit 3 to bit 5
      .nb3:
      ld [hl],a
      xor a
      ldh [rVBK],a

      ; Copy the tile number
      ; (on mono or SGB this overwrites the attribute)
      ld a,[de]  ; A[3:0]: tilenumber
      and $0F
      ld [hl+],a

      ; Advance to next byte
      inc de
      dec c
      jr nz,.byteloop
    ld de,12
    add hl,de
    pop bc
    pop de  ; Stack: rowmap pos
    dec b
    jr nz,.rowloop
  pop de
  jr .rowgrploop


; There's no wave channel period that is exactly 1 kHz, but there's
; a 500 Hz.  So load the wave RAM with two sine cycles and play that.
HALF_KHZ equ 2048-131

section "smptebars", ROM0
; These parts of the SMPTE test palette are not also included
; in the SGB master palette
smpte_palette_dark:
  drgb $101010  ; Green to blue (nonblue replaced with black)
  drgb $C010C0
  drgb $101010
  drgb $1010C0
  drgb $101010  ; Green to white (nonblue replaced with black)
  drgb $10C0C0
  drgb $101010
  drgb $C0C0C0

smpte_palette_both:
  drgb $101010
  drgb $300068  ; purple (Q)
  drgb $FFFFFF  ; bright white
  drgb $002050  ; blue (I)
  drgb $101010  ; shade2 (black)
  drgb $080808  ; shade1
  drgb $181818  ; shade3
  drgb $FF00FF

smpte_palette_light:
  drgb $101010  ; Green to blue (nonblue replaced with black)
  drgb $FF10FF
  drgb $101010
  drgb $1010FF
  drgb $101010  ; Green to white (nonblue replaced with black)
  drgb $10FFFF
  drgb $101010
  drgb $FFFFFF

cbog_sgb_rects:
  db $04*8+1  ; 1 packet holds up to 2 rectangles
  db 2        ; number of rectangles

  db %00000111  ; bit 0: inside, 1: border, 2: outside
  db %00000101  ; inside and border to palette 1, outside to palette 0
  db 10, 3, 19, 6

  db %00000001  ; bit 0: inside, 1: border, 2: outside
  db %00000101  ; inside and border to palette 0
  db 0, 11, 9, 14

  db 0, 0


;;
; 00: c0
; 01: c1
; 02: c2
; 03: c3
; 04: 7 c3, 1 c2
; 05: 6 c2, 2 c1
; 06: 5 c1, 3 c0
; 07: 4 c0, 4 c1
; 08: 4 c2, 4 c3
; 09: 06 flipped
; 0A: 05 flipped
; 0B: 04 flipped
; 0C: Grid square
load_smpte_tiles:
  ld hl,CHRRAM0
  ld de,smptetiles_chr
  ld b,13
  jp pb16_unpack_block

activity_barsongray:
  ld a,helpsect_color_bars_on_gray
  jr smpte_bars_engine
activity_smpte_bars:
  ld a,helpsect_smpte_color_bars
smpte_bars_engine:
  ldh [curhelpsect],a
  xor a
  ldh [curpalette],a
  ldh [curvolume],a

.restart:
  call clear_gbc_attr

  ; Load lightness-invariant part of SMPTE bars palette
  ld a,$A0
  ld bc,(2*8)*256+low(rBCPS)
  ld hl,smpte_palette_both
  call set_gbc_palette

  call load_smpte_tiles
  ld de,smpte_rowmap
  ldh a,[curhelpsect]
  cp helpsect_smpte_color_bars
  jr z,.not_load_alternate
    ld de,ongray_rowmap
  .not_load_alternate:
  call smpte_load_map_SCRN0

  call init_apu
  ld hl,waveram_sin2x
  call load_waveram
  ldh a,[curvolume]
  ldh [rNR32],a
  ld a,low(HALF_KHZ)
  ldh [rNR33],a
  ld a,high(HALF_KHZ)
  or $80
  ldh [rNR34],a

  ld a,LCDCF_ON|BG_NT0|BG_CHR01
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a

  ld a, %11100100
  ldh [rLYC],a  ; disable lyc irq
  ldh [rBGP],a  ; set SGB internal
  ldh a, [hw_capability]
  ldh [need_sgb_update], a  ; mark as ready for re-send
  ld hl, cbog_sgb_rects
  call sgb_send_if_sgb

.loop:
  ldh a,[curhelpsect]
  ld b,a
  call read_pad_help_check
  jr nz,.restart

  ldh a,[new_keys]
  ld b,a
  bit PADB_B,b
  jr z,.no_quit
    xor a
    ldh [rNR52],a  ; stop audio circuit
    ret
  .no_quit:
  bit PADB_A,b
  jr z,.notogglepalette
    ldh a,[curpalette]
    cpl
    ldh [curpalette],a
    ldh a, [hw_capability]
    ldh [need_sgb_update], a
  .notogglepalette:
  bit PADB_SELECT,b
  jr z,.notogglevol
    ldh a,[curvolume]
    xor $20
    ldh [curvolume],a
  .notogglevol:

  rst wait_vblank_irq
  ; load volume after vsync to ensure the sound starts at the
  ; same time as the picture
  ldh a,[curvolume]
  ldh [rNR32],a

  ; Load palette and tiles
  ld hl,cbog_palette_dark
  ld de,smpte_palette_dark
  ldh a,[curpalette]
  or a
  jr z,.notloadlight
    ld hl,cbog_palette_light
    ld de,smpte_palette_light
  .notloadlight:
  ld a,$80
  ld bc,(2*8)*256+low(rBCPS)
  call set_gbc_palette
  ld h, d
  ld l, e
  ld a,$90
  ld bc,(2*8)*256+low(rBCPS)
  call set_gbc_palette

  ldh a, [need_sgb_update]
  rra
  jr nc, .not_send_sgb
    xor a
    ldh [need_sgb_update], a
    ld d, a
    ld e, a
    ld bc,$1415
    ld a, [curpalette]
    or a
    jr z,.sgb_is_dark
      ld bc,$1617
    .sgb_is_dark:
    call sgb_set_palettes_bcde
  .not_send_sgb:

  jr .loop

; Color bleed test ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This shares code with Full screen stripes in stills.z80.

section "colorbleed", ROM0
sgb_bleed_rects:
  db $04*8+2  ; 3 packets hold up to 5 rectangles
  db 3        ; number of rectangles

  ; Rows 0-5: palette 0
  ; Rows 6-9: palette 1
  db %00000111  ; bit 0: inside, 1: border, 2: outside
  db %00010000  ; inside and border to palette 0, outside to palette 1
  db 0, 0, 19, 5  ; l, t, r, b, inclusive

  ; Rows 10-13: palette 2
  db %00000001
  db %00000010
  db 0, 10, 19, 13

  ; Rows 14-17: palette 3
  db %00000001
  db %00000011
  db 0, 14, 19, 17

  ; Rectangles 4 and 5 unused
  db 0, 0, 0, 0, 0, 0
  db 0, 0, 0, 0, 0, 0

activity_color_bleed::
  ld a,helpsect_color_bleed
  jp full_stripes_common

load_color_bleed::
  ; Load plane 0
  ld hl,_SCRN0
  ld a,$06  ; blank tile
  ld c,32*2+2
  rst memset_tiny
  ld b,4
  .p0rowgrploop:
    ld d,3
    .p0rowloop:
      ld a,$10  ; pattern tile
      ld c,16
      rst memset_tiny
      ld a,$06  ; blank tile
      ld c,16
      rst memset_tiny
      dec d
      jr nz,.p0rowloop
    ld c,32  ; blank row
    rst memset_tiny
    dec b
    jr nz,.p0rowgrploop

  ; Load GBC attributes
  ldh a, [hw_capability]
  rra
  jr c, .load_sgb_attrs
  ld a, 1
  ldh [rVBK],a
  xor a
  ldxy hl, 0, 2
  .gbcattrloop:
    ld c,4*32
    rst memset_tiny
    inc a
    cp 4
    jr nz, .gbcattrloop
  xor a
  ldh [rVBK],a
  
  ; Load palette
  ld a,$80
  ld bc,(color_bleed_palette_end-color_bleed_palette)*256+low(rBCPS)
  ld hl,color_bleed_palette
  jp set_gbc_palette

.load_sgb_attrs:
  ld a, %11100100
  ldh [rBGP], a
  ld hl, sgb_bleed_rects
  call sgb_send
  ; fall through
sgb_set_palette_bleed::
  ld bc, $0405
  ld de, $0607
  jp sgb_set_palettes_bcde
