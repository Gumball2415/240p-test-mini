;
; Motion blur test for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;

include "src/gb.inc"
include "src/global.inc"

; This motion blur test also replaces 100 IRE.

  rsset hTestState
back_shade   rb 1  ; 0-3
on_time      rb 1  ; 1-20
on_shade     rb 1  ; 0-3
off_time     rb 1  ; 1-20
off_shade    rb 1  ; 0-3
is_stripes   rb 1  ; 0: colors 2 and 3 both on or off; 1: one on, other off
is_running   rb 1  ; $00: off; $80: in off time; $80: in on time
frames_left  rb 1  ; until toggle bit 0
bgp_value    rb 8

section "motionblur_map0",ROM0
wndtxt:
  db   0,"Back shade",10
  db  48,"time",10
  db  64,"Stripes",10
  db  98,"Off",10
  db 114,"On",0

wndmap:
  db $20,$21,$22,$23,$24,$25  ; Back shade
  db $2E,$2F,$04,$26,$27,$04  ; On time
  db $04,$04,$04,$23,$24,$25  ;    shade
  db $2C,$2D,$04,$26,$27,$04  ; Off time
  db $04,$04,$04,$23,$24,$25  ;     shade
  db $28,$29,$2A,$2B,$04,$04  ; Stripes

row_high_low:  ; high+1 and low values for each row, monochrome
  dw $0400,$1501,$0400,$1501,$0400,$0200

row_high_low_gbc:  ; high+1 and low values for each row, GBC
  dw $2000,$1501,$2000,$1501,$2000,$0200

section "motionblur",ROM0
activity_motion_blur::
  xor a
  ldh [frames_left],a  ; = 0
  ldh [is_running],a
  ldh [is_stripes],a
  ldh [off_shade],a
  ld [help_cursor_y],a
  inc a
  ldh [off_time],a     ; = 1
  ldh [on_time],a

  ; Calculate starting on and back shades: 3 and 1 for DMG,
  ; 31 and 15 for GBC
  ld a,[initial_a]
  cp $11
  ld a,3
  jr nz,.is_dmg_shade
    ld a,31
  .is_dmg_shade:
  ld b,a
  ldh [on_shade],a
  and a
  rra
  ldh [back_shade],a 
.restart:
  call clear_gbc_attr

  ; Clear tilemaps to color 0
  ld h,$04
  ld de,_SCRN0
  ld bc,32*18
  call memset

  ; Load basic tiles
  ld hl,CHRRAM0
  ld de,bggfx_chr
  ld b,32
  call pb16_unpack_block
  
  ; Load label tiles
  call vwfClearBuf
  ld hl,wndtxt
  .labelloadloop:
    ld a,[hl+]
    ld b,a
    call vwfPuts
    ld a,[hl+]
    or a
    jr nz,.labelloadloop
  ld hl,CHRRAM0+$20*16
  ld bc,$0010  ; planes 0 and 1, c=16 tiles
  call vwfPutBuf03

  ; Load label map
  ld bc,$0606  ; size
  ld hl,wndmap
  ld de,_SCRN0+32*11+6
  call load_nam

  ; Draw 8x8-tile rect of solid $0A (striped tile) starting at (6, 2)
  ld hl,_SCRN0+32*2+6
  ld a,$0A
  ld b,8
  ld de,32-8
  .rectrowloop:
    ld c,8
    call memset_tiny
    add hl,de
    dec b
    jr nz,.rectrowloop

  ; Turn on rendering (no sprites)
  ld a,255
  ldh [rLYC],a  ; disable lyc irq
  ld a,%01010101  ; Palette all gray until calculated
  call set_bgp
  ld a,LCDCF_ON|BG_NT0|BG_CHR01
  ld [vblank_lcdc_value],a
  ldh [rLCDC],a

.loop:
  ld b,helpsect_motion_blur
  call read_pad_help_check
  jr nz,.restart

  ; Process input
  ld a,[new_keys]
  bit PADB_B,a
  ret nz
  call motionblur_handle_presses
  call make_help_vram
  call motionblur_calc_bgp
  
  call wait_vblank_irq

  ; Set bg palette
  ldh a,[bgp_value]
  ldh [rBGP],a
  ld a,[initial_a]
  cp $11
  jr nz,.no_write_gbc_palette
    ld hl,bgp_value
    ld bc,$0800|low(rBCPS)
    ld a,$80
    call set_gbc_palette
  .no_write_gbc_palette:

  ; Blit help map
  ld bc,$0206  ; size
  ld hl,help_line_buffer
  ld de,_SCRN0+32*11+12
  call load_nam

  ; Draw cursor
  ld hl,_SCRN0+32*11+5
  ld a,[help_cursor_y]
  inc a
  ld c,a
  ld b,6
  ld de,32
  .draw_cursor_loop:
    ld a,$04
    dec c
    jr nz,.draw_cursor_not_this_row
      ld a,$05
    .draw_cursor_not_this_row:
    ld [hl],a
    add hl,de
    dec b
    jr nz,.draw_cursor_loop

  jr .loop

motionblur_handle_presses:
  ld b,PADF_UP|PADF_DOWN|PADF_LEFT|PADF_RIGHT
  call autorepeat
  ld a,[new_keys]
  ld b,a

  ; Ignore the Control Pad while flicker is running
  ldh a,[is_running]
  rla
  jr c,.no_cursor_control

  ; Up/Down: Choose a row
  ld a,[help_cursor_y]
  bit PADB_UP,b
  jr z,.no_cursor_up
    dec a
  .no_cursor_up:
  bit PADB_DOWN,b
  jr z,.no_cursor_down
    inc a
  .no_cursor_down:

  ; Write back only if within range
  cp 6
  jr nc,.no_writeback_cursor_y
    ld [help_cursor_y],a
  .no_writeback_cursor_y:

  ; Fetch value and lower/upper bounds for this row
  ld a,[help_cursor_y]
  add low(back_shade)
  ld c,a  ; C points to HRAM for row B

  ; Ranges differ between mono and GBC
  ld de,row_high_low
  ld a,[initial_a]
  cp $11
  jr nz,.not_gbc_ranges
    ld de,row_high_low_gbc
  .not_gbc_ranges:
  ld a,[help_cursor_y]
  call de_index_a  ; Valid values are L <= x < H
  ld a,[$FF00+c]

  ; Left/Right: Change value on this row
  bit PADB_LEFT,b
  jr z,.no_cursor_left
    dec a
  .no_cursor_left:
  bit PADB_RIGHT,b
  jr z,.no_cursor_right
    inc a
  .no_cursor_right:
  
  ; Write back only if within range
  cp l
  jr c,.no_writeback_value
  cp h
  jr nc,.no_writeback_value
    ld [$FF00+c],a
  .no_writeback_value:

.no_cursor_control:
  bit PADB_A,b
  jr z,.no_toggle_running
    ldh a,[is_running]
    and $80
    xor $80
    ldh [is_running],a
    ld a,1
    ld [frames_left],a
  .no_toggle_running:

  ret

make_help_vram:
  xor a
  ld bc,5*256+low(back_shade)
  ld hl,help_line_buffer
  .loop:
    ld a,[$FF00+c]
    push bc
    call bcd8bit
    or a
    jr nz,.has_tens
      ld a,$14
    .has_tens:
    xor $10
    ld [hl+],a
    ld a,c
    xor $10
    ld [hl+],a
    pop bc
    inc c
    dec b
    jr nz,.loop
  ld a,[is_stripes]
  add a
  add $2C  ; On/Off text
  ld [hl+],a
  inc a
  ld [hl],a
  ret

motionblur_calc_bgp:
  ; If running, clock the timer forward one frame
  ldh a,[is_running]
  ld b,a
  add a
  jr nc,.not_running
    ldh a,[frames_left]
    dec a
    ldh [frames_left],a
    jr nz,.not_running

    ; Get the remaining time for the new frame.  On is 1 in
    ; is_running but first in the menu, so do this before
    ; toggling the frame bit.
    ld a,b
    add a
    add low(on_time)
    ld c,a
    ld a,[$FF00+c]
    ld [frames_left],a

    ; And toggle to the other frame
    ld a,b
    xor $01
    ld [is_running],a
  .not_running:

  ; Fetch the on and off shades
  ldh a,[off_shade]
  ld e,a
  ldh a,[on_shade]
  ld d,a
  ldh a,[back_shade]
  ld b,a
  ld c,a
  ; Now b=c=back shade, d=on shade, e=off shade

  ; If current step (bit 0) is off, swap the two
  ldh a,[is_running]
  rr a
  jr c,.no_swap
    ld a,d
    ld d,e
    ld e,a
  .no_swap:
  ; b=c=back shade, d=current frame shade, e=other frame shade

  ; If stripes are off, use the current frame shade for both rows
  ldh a,[is_stripes]
  rr a
  jr c,.no_destripe
    ld e,d
  .no_destripe:
  ; b=c=back shade, d=even rows shade, e=odd rows shade

  ld a,[initial_a]
  cp $11
  jr z,.is_gbc

    ; If not running, use the front shade with the maximum contrast
    ldh a,[is_running]
    rl a
    jr c,.is_running_mono
      ld c,0
      bit 1,b
      jr nz,.is_running_mono
      ld c,3
    .is_running_mono:
    ; b=back shade, c=front shade,
    ; d=even rows shade, e=odd rows shade

    ; Combine the four shades
    swap d
    swap e
    ld a,c
    or e  ; A = odd rows shade << 4 | front shade
    add a
    add a  ; A = odd rows shade << 6 | front shade << 2
    or b
    or d
    ; A = odd rows shade << 6 | even rows shade << 4
    ;     | front shade << 2 | back shade
    ldh [bgp_value],a
    ret
  .is_gbc:

  ; If not running, use the front shade with the maximum contrast
  ldh a,[is_running]
  rl a
  jr c,.is_running_gbc
    ld c,0
    bit 4,b
    jr nz,.is_running_gbc
    ld c,31
  .is_running_gbc:
  ; b=back shade, c=front shade,
  ; d=even rows shade, e=odd rows shade

  push de
  ld e,c
  ld d,b
  ld c,low(bgp_value)
  call .twoshades
  pop de
.twoshades:
  push de
  ld a,d
  call .oneshade
  pop de
  ld a,e
.oneshade:
  ld e,a
  add a
  add a
  ld d,a     ; DE = $0401 * gray
  add a
  ld l,a
  ld h,0     ; HL = $0008 * gray
  add hl,hl
  add hl,hl  ; HL = $0020 * gray
  add hl,de
  ; write to 
  ld a,l
  ld [$FF00+c],a
  inc c
  ld a,h
  ld [$FF00+c],a
  inc c
  ret
  