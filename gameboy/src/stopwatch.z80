;
; Stopwatch (lag test) for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"

; Stopwatch: Lag test

  rsset hTestState
hours       rb 1
minutes_bcd rb 1
seconds_bcd rb 1
frames_bcd  rb 1
is_running  rb 1

; "Lap" pauses blitting (instead "LAP" is shown) but continues running
is_lap      rb 1
is_ruler    rb 1
show_face   rb 1

section "stopwatch",ROM0

; Stopwatch is made of 12 sprites
;  ,.
; /XX\
; \XX/
;  `'
; Each row is n+1 bytes of the form &FXT or %VHXXXTTT
; where V is vertical flip, H is horizontal flip,
; X is horizontal position in tiles, and T is tile index
; (0: interior, 1: left or right edge, 2: top or bottom edge).
sw_shape:
  db      &011,&121,     $FE
  db &002,&010,&020,&132,$FE
  db &202,&010,&020,&332,$FE
  db      &211,&321,     $FF

; X, Y coordinates of each position of the frames hand
sw_hand_xy:
  db  72, 54
  db  94, 61
  db 108, 80
  db 108,104
  db  94,123
  db  72,130
  db  50,123
  db  36,104
  db  36, 80
  db  50, 61

sw_digit_gbc_palettes:
  drgb $FFFFFF
  drgb $0000CC
  drgb $8888EE
  drgb $4444DD
  drgb $FFFFFF
  drgb $FF0000
  drgb $FF8888
  drgb $FF4444

sw_sgb_rects:
  db $04*8+1  ; 1 packet holds up to 2 rectangles
  db 1        ; number of rectangles

  db %00000111  ; bit 0: inside, 1: border, 2: outside
  db %00000101  ; inside and border to palette 0, outside to palette 0
  db 15, 1, 19, 3

  db 0, 0, 0, 0, 0, 0, 0, 0

activity_stopwatch::
  xor a
  ldh [is_running],a
  ldh [is_lap],a
  ldh [is_ruler],a
  ldh [hours],a
  ldh [frames_bcd],a
  ldh [minutes_bcd],a
  ldh [seconds_bcd],a
  dec a
  ldh [show_face],a
.restart:
  call clear_gbc_attr

  ; Load background tiles
  ldh a, [hw_capability]
  add a
  jr nc,.not_plane1
    ld hl, _SCRN0+1*32+15
    ld de,32-4
    ld b,3
    ld a,1
    ldh [rVBK],a
    .frameattrloop:
      ld c,4
      call memset_tiny
      add hl,de
      dec b
      jr nz,.frameattrloop
    xor a
    ldh [rVBK],a
  .not_plane1:

  ; Clear both tilemaps
  call clear_scrn0_to_0
  ld b, 4
  call memset

  ; Load background tilemap to SCRN0
  ld l,6
  ld bc,CHRRAM2
  call allhuffdata_unpack_iu_file_l

  ; Load additional background tiles used by activity
  ld l, 1  ; stopwatchdigits
  call allhuffdata_fetch_file_l
  ld hl, CHRRAM1
  call pb16_unpack_block

  ld de, CHRRAM1
  ld hl, CHRRAM1 + $0400

  ; Lighter version of digits used for SGB blue/red
  ; from DE to HL
  .lightdigitsloop:
    ld a, [de]
    inc de
    inc de
    ld [hl+], a
    ld [hl+], a
    bit 4, h
    jr z, .lightdigitsloop

  ld l, 0  ; stopwatchhand
  call allhuffdata_fetch_file_l
  ld hl, CHRRAM0
  call pb16_unpack_block

  ld hl,_SCRN0+640
  ld de,_SCRN0+5*32+4
  ld bc,12*256+13
  call load_nam
  ld de,$0970
  ld hl,digits_label_msg
  call vwfDrawLabels

  call sw_convert
  call sw_blit
  call sw_init_oam
  call run_dma

  ld hl, sw_sgb_rects
  call sgb_send_if_sgb
  ld bc, 0*256+37
  ld d, b
  ld e, b
  call sgb_set_palettes_bcde

  ; Turn on rendering
  ld a,%10011100
  ldh [rLYC],a  ; STAT IRQ not used by this activity
  call set_bgp
  call set_obp0
  ld a,7
  ldh [rWX],a
  ld a,40      ; BG below inactive circles can be toggled by showing
  ldh [rWY],a   ; or hiding window
  ld a,LCDCF_ON|BG_NT0|BG_CHR21|OBJ_ON|WINDOW_NT1
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a

.loop:
  ld b,helpsect_stopwatch
  call read_pad_help_check
  jp nz,.restart

  ; Process input
  ldh a,[new_keys]
  bit PADB_B,a
  ret nz
  ld b,a

  ; A: Start/stop
  bit PADB_A,b
  jr z,.not_start_stop
    ldh a,[is_running]
    cpl
    ldh [is_running],a
  .not_start_stop:

  ; TODO: Select: Lap/reset (the most complicated among these)
  bit PADB_SELECT,b
  jr z,.not_lap_reset
    ; Select while in lap: Clear lap
    ldh a,[is_lap]
    or a
    jr z,.not_already_lap
    xor a
    jr .have_lap
  .not_already_lap:
    ; Select while not in lap and while running: Enable lap
    ldh a,[is_running]
    or a
    jr nz,.have_lap

    ; Select while not in lap and not running: Clear to 0
    ld [frames_bcd],a
    ld [seconds_bcd],a
    ld [minutes_bcd],a
    ld [hours],a

  .have_lap:
  ldh [is_lap],a
  .not_lap_reset:

  ; Up: Toggle ruler
  bit PADB_UP,b
  jr z,.not_toggle_ruler
    ; TODO: make this go 0, 3, 1
    ldh a,[is_ruler]
    add $03
    and $03
    cp 2
    jr nz,.ruler_skip_2
      dec a
    .ruler_skip_2:
    ldh [is_ruler],a
  .not_toggle_ruler:

  ; Down: Toggle visibility of BG below rLYC
  bit PADB_DOWN,b
  jr z,.not_toggle_face
    ld a,[show_face]
    cpl
    ld [show_face],a
  .not_toggle_face:

  ; Increment the counter by one frame
  ldh a,[is_running]
  or a
  jr z,.not_running
    ldh a,[frames_bcd]
    inc a
    daa
    cp $60
    jr c,.not_wrap_frames
      xor a
    .not_wrap_frames:
    ldh [frames_bcd],a
    jr c,.not_running

    ldh a,[seconds_bcd]
    inc a
    daa
    cp $60
    jr c,.not_wrap_seconds
      xor a
    .not_wrap_seconds:
    ldh [seconds_bcd],a
    jr c,.not_running

    ldh a,[minutes_bcd]
    inc a
    daa
    cp $60
    jr c,.not_wrap_minutes
      xor a
    .not_wrap_minutes:
    ldh [minutes_bcd],a
    jr c,.not_running
  .not_running:

  ldh a,[is_lap]
  or a
  jr nz,.skipping_convert_for_lap
    call sw_convert
    call sw_draw_clock_hand
  .skipping_convert_for_lap:
  call sw_draw_ruler

  call wait_vblank_irq
  call run_dma
  call sw_blit

  ; Show or hide the face
  ld a,[show_face]  ; $00: hide; $FF: show
  or 40  ; $28: Hide face; $FF: Show
  ldh [rWY],a
  jp .loop

digits_label_msg:
  db  20,  0,"hr",10
  db  43,  0,"minute",10
  db  81,  0,"second",10
  db 124,  0,"frame",0

; Drawing the digits ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

sw_convert:
  ld hl,help_line_buffer
  ld b, $80
  ldh a,[hours]
  call .convert_1digit
  ldh a,[minutes_bcd]
  call .convert_2digits
  ldh a,[seconds_bcd]
  call .convert_2digits
  ldh a, [hw_capability]
  rra
  ldh a,[frames_bcd]
  jr nc, .not_odd_sgb
  bit 0, a
  jr z, .not_odd_sgb
    ld b, $C0
  .not_odd_sgb:

.convert_2digits:
  push af
  swap a
  and $0F
  call .convert_1digit
  pop af
  and $0F
.convert_1digit:
  add a
  ld c,a
  add c
  add c
  or b
  ld [hl+],a
  ret

;;
; Write the converted digits at (1,2)
sw_blit:
  ; B: amount to add (0, 2, 4); C: colon tile ($00 or $BC)
  ld bc,$0000
  ld hl,_SCRN0+32*1+2
.rowloop:
  ld de,help_line_buffer
  ld a,[de]  ; hours digit: $80 + 6 * hours
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,c     ; colon tile
  ld [hl+],a

  ld a,[de]  ; tens of minutes digit
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,[de]  ; minutes digit
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,c     ; colon tile
  ld [hl+],a

  ld a,[de]  ; tens of seconds digit
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,[de]  ; seconds digit
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,c     ; colon tile
  ld [hl+],a

  ld a,[de]  ; tens of frames digit
  inc de
  add b
  ld [hl+],a
  inc a
  ld [hl+],a
  ld a,[de]  ; frames digit
  add b
  ld [hl+],a
  inc a
  ld [hl],a
  ld a,16    ; Move to next line
  add l
  ld l,a

  ld c,$BC   ; second and third rows of colon use dot tile
  inc b
  inc b
  ld a,b
  cp 6
  jr c,.rowloop

  ; Draw lap indicator
  ld hl,_SCRN0+32*4+17
  ldh a,[is_lap]
  or a
  jr z,.nolap1
  ld a,$BE
.nolap1:
  ld [hl+],a
  jr z,.nolap2
  inc a
.nolap2:
  ld [hl+],a

  ; Find which GBC color 1 palette to copy
  ld a,[help_line_buffer+6]
  and $02
  add a
  add a
  ld d,0
  ld e,a
  ld hl,sw_digit_gbc_palettes
  add hl,de

  ; And copy it
  ld a,$88
  ld bc,8*256+low(rBCPS)
  jp set_gbc_palette

; Drawing the hand (the sprites on the face at bottom half) ;;;;;;;;;

; Static allocation of OAM:
; 0 dot
; 1-12 face digit circle
; 13-30 left column
; 31-39 unused

SPRITES_BEFORE_RULER = 13

sw_init_oam:

  ; Set X, tile, and attribute of sprites that make up ruler
  ld hl,SOAM+SPRITES_BEFORE_RULER*4
  ld b,18
  .rulerobjloop:
    inc hl  ; Skip Y
    ld a,b
    rra
    ld a,8
    jr nc,.notrulerR
      ld a,14
    .notrulerR:
    ld [hl+],a  ; 1. X
    ld a,$BD
    ld [hl+],a  ; 2. tile
    xor a
    ld [hl+],a  ; 3. black
    dec b
    jr nz,.rulerobjloop
  ; Fall through to sw_draw_ruler

sw_draw_ruler:
  ld hl,SOAM+SPRITES_BEFORE_RULER*4

  ; Is the ruler enabled?  First check the displayed frames digit
  ld a,[help_line_buffer+6]
  rra
  rra
  ; If C is clear, the frame is even, so use bit 0 of is_ruler.
  ; If C is set, the frame is odd, so use bit 1 of is_ruler.
  ldh a,[is_ruler]
  jr nc,.is_even_frame
    rra
  .is_even_frame:
  rra
  jr nc,.no_ruler
  
  ; Draw Y coordinates of ruler sprites if ruler enabled
  ld a,16
  .rulerloop:
    ld [hl+],a
    add 8
    inc l
    inc l
    inc l
    cp 160
    jr c,.rulerloop
  .no_ruler:

  ld a,l
  ld [oam_used],a
  jp lcd_clear_oam

sw_draw_clock_hand:
  ldh a,[frames_bcd]
  and $0F
  ld b,a
  add a
  add a
  add 3
  ldh [Lspriterect_tile],a

  ; Look up XY coord
  ld a,b
  ld de,sw_hand_xy
  call de_index_a
  ld a,l
  ldh [Lspriterect_x],a
  ld a,h
  ldh [Lspriterect_y],a

  ; Draw the small dot halfway out
  ld hl,SOAM
  add 116  ; Y center position
  rra
  ld [hl+],a
  ldh a,[Lspriterect_x]
  add 96  ; X center position
  rra
  ld [hl+],a
  ld a,$03  ; dot tile
  ld [hl+],a
  xor a     ; attr 0
  ld [hl+],a
  ld a,l
  ld [oam_used],a

  ; Draw the large dot with a number on it
  ld de,sw_shape
.striploop:
  ld a,[de]
  inc de
  cp $FE
  jr nc,.isctrl
;+9
  ; It's a normal sprite
  ld c,a
  and %00111000  ; Isolate X offset
  ld b,a
  ldh a,[Lspriterect_y]
  ld [hl+],a     ; Copy Y coordinate unchanged
  ldh a,[Lspriterect_x]
  add b
  ld [hl+],a     ; Copy X coordinate
;+11
  ld a,c
  and %00000111  ; Tile number 0 means next tile
  jr nz,.not_utile
    ldh a,[Lspriterect_tile]
    inc a
    ldh [Lspriterect_tile],a
  .not_utile:
  ld [hl+],a     ; $00: unused; $01: h edge; $02: v edge; $03: dot; $04-$2B: digits
;+11
  ld a,c
  and %11000000
  rrca
  ld [hl+],a     ; Attribute
  jr .striploop
;7
.isctrl:
  ret nz                 ; $FF: exit
  ldh a,[Lspriterect_y]  ; $FE: next row
  add 8
  ldh [Lspriterect_y],a
  jr .striploop
