;
; Backlight zone test for 240p test suite
; Copyright 2018 Damian Yerrick
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License along
; with this program; if not, write to the Free Software Foundation, Inc.,
; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
include "src/gb.inc"
include "src/global.inc"

  rsset hTestState
def curpalette rb 1
def xpos rb 1
def ypos rb 1
def held_keys rb 1
def is_hidden rb 1
def cursize rb 1
def high_gear rb 1

section "backlight",ROM0
activity_backlight_zone::
  ld a,88
  ldh [xpos],a
  ldh [ypos],a
  xor a
  ldh [is_hidden],a
  ldh [high_gear], a
  dec a
  ldh [curpalette],a
  ld a, 1
  ldh [cursize],a

.restart:
  call clear_gbc_attr
  ldh [held_keys],a
  call sgb_set_palette_gray
  call load_backlight_chr
  call clear_scrn0_to_0
  call lcd_clear_oam

  ; Blank screen
  ld a,LCDCF_ON|BG_NT0|BG_CHR21|OBJ_ON
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a

.loop:
  ld b,helpsect_backlight_zones
  call read_pad_help_check
  jr nz,.restart

  ; Process new presses
  ldh a,[new_keys]
  ld b,a
  bit PADB_B, b  ; B: quit
  ret nz
  call select_inverts_palette

  ; Add new presses to things that can act on release
  ldh a,[held_keys]
  or b
  ldh [held_keys],a

  ldh a,[cur_keys]
  ld c, a
  rra
  jr nc,.not_A

    ; A+Left/Right: Change gear
    ld a, b
    and PADF_LEFT|PADF_RIGHT
    jr z,.gear_unchanged
      ldh a, [high_gear]
      xor 1
      ldh [high_gear], a
      jr .clear_held_A
    .gear_unchanged:

    ; A+Up/Down: Change size
    ld a, b
    and PADF_UP|PADF_DOWN
    jr z,.size_unchanged
      ldh a,[cursize]
      bit PADB_UP,b
      jr z,.not_size_up
        inc a
      .not_size_up:
      bit PADB_DOWN,b
      jr z,.not_size_down
        dec a
      .not_size_down:
      and $03
      ldh [cursize],a
    .clear_held_A:
      ; If a size key was pressed, cancel releasing A to
      ; hide/show
      ld hl,held_keys
      res PADB_A,[hl]
    .size_unchanged:
    jr .done_A

  .not_A:
    ld b, 1
    ldh a, [high_gear]
    or a
    jr z, .in_low_gear
    ldh a, [cursize]
    or a
    jr z, .in_low_gear
    .gearloop:
      sla b
      dec a
      jr nz, .gearloop
    .in_low_gear:

    ; cur_keys in C
    ldh a,[xpos]
    bit PADB_LEFT,c
    jr z,.not_left
      sub b
      cp 8
      jr nc,.not_off_left
        ld a, 8
      .not_off_left:
    .not_left:
    bit PADB_RIGHT,c
    jr z,.not_right
      add b
      cp 168
      jr c,.not_off_right
        ld a, 167
      .not_off_right:
    .not_right:
    ldh [xpos],a

    ldh a,[ypos]
    bit PADB_UP,c
    jr z,.not_up
      sub b
      cp 16
      jr nc,.not_off_top
        ld a, 16
      .not_off_top:
    .not_up:
    bit PADB_DOWN,c
    jr z,.not_down
      add b
      cp 160
      jr c,.not_off_bottom
        ld a, 159
      .not_off_bottom:
    .not_down:
    ldh [ypos],a
  
    ; Release A: Invert
    ldh a,[held_keys]
    and PADF_A
    jr z,.no_release_A
      ldh a,[is_hidden]
      cpl
      ldh [is_hidden],a
      xor a
      ldh [held_keys],a
    .no_release_A:
  .done_A:

  ; Move sprite
  ld hl,SOAM
  ldh a,[ypos]
  ld b,a
  ldh a,[is_hidden]
  or b
  ld [hl+],a  ; 0: Y position
  ldh a,[xpos]
  ld [hl+],a  ; 1: X position
  ldh a,[cursize]
  ld [hl+],a  ; 2: Tile
  xor a
  ld [hl+],a  ; 3: Palette and flip

  rst wait_vblank_run_dma
  ldh a,[curpalette]
  call set_bgp
  cpl
  call set_obp0
  jp .loop

