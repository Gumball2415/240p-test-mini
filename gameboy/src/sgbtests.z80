include "src/gb.inc"
include "src/global.inc"

section "sgbcolors", ROM0, ALIGN[3]
sgb_master_palette:
gbmonopalette::
  ; 0: Grays
  drgb $F8F8F8
  drgb $A8A8A8
  drgb $585858
  drgb $000000

  ; 1: Help
  drgb $F8D0A8
  drgb $A88848
  drgb $884820
  drgb $001050

  ; 2: Grid
  drgb $F8F8F8
  drgb $FF0000
  drgb $FF0000
  drgb $000000

  ; 3: Sharpness bricks
  drgb $F8F8F8
sharpness_bricks_gbc_palette::
  drgb $606040
  drgb $402020
  drgb $200000

  ; 4-7: Color bleed, one for each row
color_bleed_palette::
  drgb $000000
  drgb $FF0000
  drgb $000000
  drgb $000000
  drgb $000000
  drgb $00FF00
  drgb $000000
  drgb $000000
  drgb $000000
  drgb $0000FF
  drgb $000000
  drgb $000000
  drgb $000000
  drgb $FFFFFF
  drgb $000000
  drgb $000000
color_bleed_palette_end::

  ; 8-11: 12-step gray ramp
  drgb $000000
  drgb $101010
  drgb $282828
  drgb $383838
  drgb $000000
  drgb $505050
  drgb $686868
  drgb $787878
  drgb $000000
  drgb $909090
  drgb $a8a8a8
  drgb $b8b8b8
  drgb $000000
  drgb $d0d0d0
  drgb $e8e8e8
  drgb $f8f8f8

  ; 12-13: Color bars on gray (75%)
  drgb $B80000
  drgb $B800B8
  drgb $B8B800
  drgb $B8B8B8
  drgb $B80000
  drgb $00B8B8
  drgb $00B800
  drgb $0000B8

  ; 14-15: Color bars on gray (100%)
  drgb $F80000
  drgb $F800F8
  drgb $F8F800
  drgb $F8F8F8
  drgb $F80000
  drgb $00F8F8
  drgb $00F800
  drgb $0000F8

  ; 16-18: Lame boy
lameboybgpalette_gbc::
  drgb $8fa1ff  ; 0: Sky and floor
  drgb $342800
  drgb $366d00
  drgb $55c753
  drgb $8fa1ff  ; 1: Push blocks
  drgb $6D5C00
  drgb $BDAC2C
  drgb $E4DCA8
lameboyobjpalette_gbc::
  drgb $8fa1ff  ; 2: Obj
  drgb $342800
  drgb $BD3C30
  drgb $FFCFCA
lameboyobjpalette_gbc_end::

  ; 19: Vertical scroll
  drgb $FFFFAA
  drgb $FFAA55
  drgb $AA5500
  drgb $550000

  ; 20-21: Color bars on gray dark
cbog_palette_dark::
  drgb $10C010  ; Green to white
  drgb $10C0C0
  drgb $C0C010
  drgb $C0C0C0
  drgb $10C010  ; Green to blue
  drgb $C010C0
  drgb $C01010
  drgb $1010C0

  ; 22-23: Color bars on gray light
cbog_palette_light::
  drgb $10FF10  ; Green to white
  drgb $10FFFF
  drgb $FFFF10
  drgb $FFFFFF
  drgb $10FF10  ; Green to blue
  drgb $FF10FF
  drgb $FF1010
  drgb $1010FF

  ; 24-27: PLUGE test
pluge_palette_common::
  drgb $686868
  drgb $989898
  drgb $c8c8c8
  drgb $f8f8f8
  drgb $686868
  drgb $686868
  drgb $c8c8c8
  drgb $f8f8f8

pluge_palette_ntsc::
  drgb $101010  ; NTSC version
  drgb $181818
  drgb $080808
  drgb $080808

  drgb $000000  ; NTSC-J version
  drgb $080808
  drgb $080008
  drgb $000800

  ; 28-32: PLUGE Contrast test
pluge_shark_palette::
  drgb $000000
  drgb $A8A8A8
  drgb $102080
  drgb $007080

  drgb $000000
  drgb $202020
  drgb $101010
  drgb $202020

  drgb $000000
  drgb $101010
  drgb $080808
  drgb $101010

  drgb $D8D8D8
  drgb $F8F8F8
  drgb $E8E8E8
  drgb $F8F8F8

  drgb $E8E8F8
  drgb $F8F8F8
  drgb $F0F0F0
  drgb $F8F8F8

  ; 33-36: Hill zone scroll test
  ; 33: Sky and water (dark brown, medium brown, sky blue, white)
  drgb $503000
  drgb $705000
  drgb $8FA1FF
  drgb $FFFFFF
  ; 34: Far foliage (dark brown, medium green, light green, white)
  drgb $402000
  drgb $60A000
  drgb $A0E020
  drgb $FFFFFF
  ; 35: Top of grass (dark brown, medium green, light green, sky blue)
  drgb $402000
  drgb $60A000
  drgb $A0E020
  drgb $8FA1FF
  ; 36: Bottom of grass (dark brown, dark green, medium green, light green)
  drgb $402000
  drgb $406000
  drgb $60A000
  drgb $A0E020

  ; 37: Stopwatch frames
  drgb $F8F8F8
  drgb $A8A8E0
  drgb $FF0000
  drgb $0000C8

sgb_master_palette_end:

section "sgbcode", ROM0
; An activity that uses PAL01 instead of PAL_SET may need to
; clear attributes first
sgb_cmd_clear_attrs::
  db $04*8+1  ; 1 packet holds up to 2 rectangles
  db 1        ; number of rectangles

  db %00000111  ; bit 0: inside, 1: border, 2: outside
  db %00000000  ; inside and border to palette 0, outside to palette 0
  db 0, 0, 19, 17

  db 0, 0, 0, 0, 0, 0, 0, 0

;;
; Turns off the LCD, sets scroll to 0, sets BGP to identity ($E4),
; and sets up an identity tilemap in _SCRN0 for Super Game Boy
; *_TRN commands.  (Clobbers SCRN_TMP.)
sgb_load_trn_tilemap:
  call lcd_off
  ld a, %11100100
  ldh [rBGP], a
  call clear_scrn0_to_0
  ld hl, SCRN_TMP
  push hl
  xor a
  ld c, a
  ldh [rSCX], a
  ldh [rSCY], a
  call memset_inc
  pop hl
  ld de, _SCRN0
  jp load_full_nam

sgb_freeze:
  ; Freeze display while doing transfers
  call busy_wait_vblank
  ld a, $17*8+1
  ld b, $01  ; Freeze current screen
  jp sgb_send_ab

;;
; Turns on rendering, sends a *_TRN packet with first two bytes
; A and B, and turns rendering back off.
sgb_send_trn_ab:
  ld l, a
  ld a,LCDCF_ON|LCDCF_BGON|LCDCF_BG8000|LCDCF_BG9800
  ldh [rLCDC],a
  ld a, l
  call sgb_send_ab
  jp lcd_off

sgb_load_master_palette::
  call sgb_freeze

  ; Load master palette into CHRRAM0
  call sgb_load_trn_tilemap
  ld hl, sgb_master_palette
  ld de, CHRRAM0
  ld bc, sgb_master_palette_end - sgb_master_palette
  call memcpy

  ; Do the transfer
  ld a, $0B*8+1
  ld b, 0
  jp sgb_send_trn_ab

sgb_set_palette_gray::
  ld b, 0
  ; fall through
sgb_set_palette_b::
  ld c, b
  ld d, b
  ld e, b
  ; fall through

;;
; Sets Super Game Boy palettes and unfreezes the display.
; Does nothing on non-SGB.
; @param B index into last PAL_TRN for subpalette 0
; @param C index into last PAL_TRN for subpalette 1
; @param D index into last PAL_TRN for subpalette 2
; @param E index into last PAL_TRN for subpalette 3
sgb_set_palettes_bcde::
  ldh a, [hw_capability]
  rra
  ret nc
  ld a, $40
  ; fall through

;;
; Sets Super Game Boy palettes defined through PAL_TRN
; and optionally loads an attribute table defined through ATTR_TRN.
; @param B index into last PAL_TRN for subpalette 0
; @param C index into last PAL_TRN for subpalette 1
; @param D index into last PAL_TRN for subpalette 2
; @param E index into last PAL_TRN for subpalette 3
; @param A bit 7: load attribute table whose index is in bits 0-5;
;   bit 6: unfreeze display
sgb_set_palettes_bcde_attr_a::
  ld hl, help_line_buffer
  push hl
  push af
  push bc

  ; Clear unused bytes of packet
  push hl
  xor a
  ld c, 16
  rst memset_tiny
  pop hl

  ; Populate packet
  ld a, $0A*8+1  ; PAL_SET
  ld [hl+], a
  pop bc
  ld a, b
  ld [hl+], a
  inc hl
  ld a, c
  ld [hl+], a
  inc hl
  ld a, d
  ld [hl+], a
  inc hl
  ld a, e
  ld [hl+], a
  inc hl
  pop af  ; A = unfreeze and predefuattribute table command
  ld [hl+], a

  ; And send it to the SGB
  pop hl
  jp sgb_send


; The border consists
; Up to 64 tiles in Super NES format, compressed with PB16
; A number of rows of tilemap data, compressed with IUR
; 28 bytes: in what order the rows are stored
; 16 bytes: palette

sgb_load_border::
  call sgb_freeze
  call sgb_load_trn_tilemap

  ; Load tiles
  ld de, sgbborder
  ld a, [de]
  inc de
  ld b, a
  ld hl, CHRRAM0
  call pb16_unpack_block
  ; ld b, 0  ; guaranteed by pb16_unpack_block
  push de
  ld a, $13<<3|1
  call sgb_send_trn_ab
  pop hl

  ; Load map rows
  ; IUR unpacked unique rows, but the border duplicates entire rows:
  ; the blank rows at top and bottom and the left and right borders
  ; beside the GB screen.
  call iur_unpack_2hl_bytes
  ld b, 28
  ld de, CHRRAM0
  .rowloop:
    ld a, [hl+]
    push hl

    ; calculate start of row
    ld hl, SCRN_TMP>>5
    add l
    ld l, a
    ; Need not worry about carry because the next carry is at A000
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl
    add hl, hl

    ; Expand each tilemap byte on this row to a tile number and
    ; a flip attribute
    ld c, 32
    .tileloop:
      ld a, [hl]
      and $3F
      ld [de], a  ; tile number
      inc de
      xor [hl]
      inc l
      or $10
      ld [de], a  ; attributes: VH001PP0
      inc de
      dec c
      jr nz, .tileloop
    pop hl
    dec b
    jr nz, .rowloop

  ; And last: the palette
  ld bc, 32
  ld de, CHRRAM1
  call memcpy
  ; ld b, 0  ; guaranteed by memcpy

  ; Push tilemap and palette to the SGB
  ld a, $14<<3|1
  jp sgb_send_trn_ab

; NTSC chroma crosstalk test ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  rsset hTestState
hIncTime    rb 1
hCurPalette rb 1

sgb_ntsc_test::
  call clear_gbc_attr
  ld hl, sgb_cmd_clear_attrs
  call sgb_send
  ld a, %11100100
  ldh [rBGP], a
  ldh [rLYC], a  ; disable lyc irq
  ld a, 4
  ldh [hIncTime], a
  ldh [rSCX], a
  ldh [hCurPalette], a

  ; Load tiles
  ld hl, CHRRAM0
  ld b, 48
  ld a, %11011011
  or a
  .chrloop:
    ld [hl+], a
    adc a
    dec b
    jr nz, .chrloop

  ; Load map background
  ld hl, _SCRN0
  .mapfill3loop:
    ld a, 3
    .mapfillloop:
      dec a
      ld [hl+], a
      jr nz, .mapfillloop
      ld a, 3
      dec b
      jr nz, .mapfill3loop

  ; Load map foreground
  ld de, pass_pattern
  ld a, 1
  .mapcolloop:
    ; Seek to start (bottom) of column
    ldxy hl, 0, 11
    or l
    ld l, a

    ; Grab a column byte
    ld a, [de]
    ld b, a
    inc de
    push de
    ld de, -32
    .mapcellloop:
      sla b
      jr nc, .mapnobyte
        ld a, [hl]
        inc a
        cp 3
        jr c, .mapno3wrap
          xor a
        .mapno3wrap:
        ld [hl], a
      .mapnobyte:
      add hl, de
      inc b
      dec b
      jr nz, .mapcellloop

    pop de
    ld a, l
    and $1F
    inc a
    cp 20
    jr nz, .mapcolloop

  ld a,LCDCF_ON|BG_NT0|BG_CHR01
  ldh [vblank_lcdc_value],a
  ldh [rLCDC],a
.loop:
  ld b, helpsect_chroma_crosstalk
  call read_pad_help_check
  jr nz, sgb_ntsc_test
  rst wait_vblank_irq

  ld a, [hIncTime]
  dec a
  jr nz, .no_new_palette
    ld hl, help_line_buffer
    push hl
    ld a, $00*8+1
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a
    call wr1color
    call wr1color
    call wr1color
    ld c, 1
    call add_c_to_curpalette

    pop hl
    call sgb_send

    ld a, 12
  .no_new_palette:
  ldh [hIncTime], a

  ldh a, [new_keys]
  bit PADB_B, a
  jr z, .loop
  ret

wr1color:
  ld c, 4
  call add_c_to_curpalette
  add a
  add low(nes_palette_11to1c)
  ld e, a
  adc high(nes_palette_11to1c)
  sub e
  ld d, a
  ld a, [de]
  ld [hl+], a
  inc de
  ld a, [de]
  ld [hl+], a
  ret

add_c_to_curpalette:
  ldh a, [hCurPalette]
  add c
  cp 12
  jr c, .nowrap
    sub 12
  .nowrap:
  ldh [hCurPalette], a
  ret

; The needed alignment is not fully understood.
; If "Chroma crosstalk" produces noticeable diagonal stripes even
; on S-Video or RGB, revisit this and wr1color.
section "crosstalkcolors",ROM0,ALIGN[1]
nes_palette_11to1c:
  if 0
  ; NES palette made with bisqwit's tool
  ; Not ideal for Super NES, but better than nothing
  drgb $0f63b3
  drgb $4051d0
  drgb $7841cc
  drgb $a736a9
  drgb $c03470
  drgb $bd3c30
  drgb $9f4a00
  drgb $6d5c00
  drgb $366d00
  drgb $077704
  drgb $00793d
  drgb $00727d
  else
  ; 12 evenly spaced YUV points
  drgb $8067ff
  drgb $a358ed
  drgb $bd54bf
  drgb $c75b80
  drgb $bd6c40
  drgb $a38312
  drgb $809800
  drgb $5ca712
  drgb $42ab40
  drgb $38a47f
  drgb $4293bf
  drgb $5c7ced
  endc

pass_pattern:
  db %01111111
  db %00000110
  db %00001000
  db %00110000
  db %01111111
  db %00000000
  db %00000001
  db %01111111
  db %00000001
  db %00000000
  db %00100110
  db %01001001
  db %01001001
  db %00110010
  db %00000000
  db %00111110
  db %01000001
  db %01000001
  db %00100010
