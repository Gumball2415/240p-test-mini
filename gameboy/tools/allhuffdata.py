#!/usr/bin/env python
import sys
import os
import huffnib
import pb16
from vwfbuild import rgbasm_bytearray

# Format of ROM lookup table
# 0 if nonzero, replace this entry with its successor on GBC
# 1 tile count
# 2 ptr to Huffman block in ROM
# 4 WRAM ptr to decompressed data
# 6 ptr to data following Huffman block in ROM (e.g. IUR tilemap)
#
# These will be loaded into registers as
# B: tile count
# DE: decompressed data
# HL: data following Huffman block
#
# Makefile tip:
# huff_files = DMG? Gus_portrait.iu Gus_portrait.iuc
#  $(filter-out DMG?,$(huff_files))

def main(argv=None):
    filenames = (argv or sys.argv)[1:]

    fileoffsets = []
    allhuffdata = bytearray()
    wramptr = wramendptr = 0x0000
    fnit = iter(filenames)
    outfilename = "-"
    for filename in fnit:
        if filename == '-o':
            outfilename = filename[2:] or next(fnit)
            continue
        gbcreplace = False
        if filename == 'DMG?':
            filename, gbcreplace = next(fnit), True
        with open(filename, "rb") as infp:
            data = infp.read()
        ext = os.path.splitext(filename)[1].lower()
        if ext == (".pb16"):
            utiles, endoffset = pb16.unpb16(data)
            ntiles, startoffset = -(-len(utiles) // 2), 0
        elif ext in (".iu", ".iuc"):
            ntiles, startoffset = data[0], 1
            utiles, endoffset = pb16.unpb16(data, offset=1, npackets=ntiles * 2)
        huffdata = huffnib.huffnibenc(data[startoffset:endoffset])

        # Write compressed data and ancillary data
        huffptr = len(allhuffdata)
        allhuffdata.extend(huffdata)
        extraptr = len(allhuffdata)
        allhuffdata.extend(data[endoffset:])

        # Make pointers
        wramendptr = max(wramptr + endoffset - startoffset, wramendptr)
        entry = filename, gbcreplace, ntiles, huffptr, wramptr, extraptr
        fileoffsets.append(entry)
        if not gbcreplace: wramptr = wramendptr

    lines = [
        '; generated by allhuffdata.py',
        '; Nibble-wise Huffman decompression is slow: 5 kB/s on Game Boy.',
        '; While the copyright notice is displayed, help decompresses this data'
        '; for later rapid access.',
        'section "huffwram", WRAM0',
        'huffwram: ds %d ' % wramendptr,
        'section "huffdir", ROM0, align[3]',
    ]
    for i, row in enumerate(fileoffsets):
        filename, gbcreplace, ntiles, huffptr, wramptr, extraptr = row
        filename = os.path.basename(filename)
        lines.append("  ; %d: %s" % (i, filename))
        lines.append(
            "  db 1  ; replace with next on GBC"
            if gbcreplace
            else "  db 0"
        )
        lines.append("  db low(%d)" % ntiles)
        lines.append("  dw allhuffdata+$%04x" % huffptr)
        lines.append("  dw huffwram+$%04x" % wramptr)
        lines.append("  dw allhuffdata+$%04x" % extraptr)
    lines.append('section "allhuffdata", ROMX  ; %d bytes' % len(allhuffdata))
    lines.append("allhuffdata:")
    lines.append(rgbasm_bytearray(allhuffdata))
    lines.append("")
    lines = "\n".join(lines)
    if outfilename == '-':
        sys.stdout.write(lines)
    else:
        with open(outfilename, "w") as outfp:
            outfp.write(lines)

filenames = [
##    "DMG?", "../obj/gb/Gus_portrait.iu", "../obj/gb/Gus_portrait-GBC.iuc",
##    "../obj/gb/stopwatchface.iu",
##    "../obj/gb/linearity-quadrant.iu",
##    "../obj/gb/sharpness.iu",
    "../obj/gb/stopwatchhand.chrgb.pb16",
    "../obj/gb/stopwatchdigits.chrgb.pb16",
##    "../obj/gb/spritegfx.chrgb.pb16",
##    "../obj/gb/greenhillzone.u.chrgb.pb16",
]
if __name__=='__main__':
    if 'idlelib' in sys.modules:
        argv = [sys.argv[0]]
        argv.extend(filenames)
        main(argv)
    else:
        main()
