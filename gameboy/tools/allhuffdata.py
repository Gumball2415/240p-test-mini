#!/usr/bin/env python3
"""
Huffman graphics compression for 144p Test Suite
Copyright 2019-2021 Damian Yerrick

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
"""
import sys
import os
import huffnib
import pb16
from vwfbuild import rgbasm_bytearray

# Format of ROM lookup table
# 0 if nonzero, replace this entry with its successor on GBC
# 1 tile count
# 2 ptr to Huffman block in ROM
# 4 WRAM ptr to decompressed data
# 6 ptr to data following Huffman block in ROM (e.g. IUR tilemap)
#
# These will be loaded into registers as
# B: tile count
# DE: decompressed data
# HL: data following Huffman block
#
# Makefile tip:
# huff_files = DMG? Gus_portrait.iu Gus_portrait.iuc
#  $(filter-out DMG?,$(huff_files))

def main(argv=None):
    filenames = (argv or sys.argv)[1:]

    fileoffsets, filesizes = [], []
    allhuffdata = bytearray()
    wramptr = wramendptr = 0x0000
    fnit = iter(filenames)
    outfilename = "-"

    for filename in fnit:
        if filename == '-o':
            outfilename = filename[2:] or next(fnit)
            continue
        gbcreplace = False
        if filename == 'DMG?':
            filename, gbcreplace = next(fnit), True
        with open(filename, "rb") as infp:
            data = infp.read()
        ext = os.path.splitext(filename)[1].lower()
        if ext == (".pb16"):
            utiles, endoffset = pb16.unpb16(data)
            ntiles, startoffset = -(-len(utiles) // 2), 0
        elif ext in (".iu", ".iuc"):
            ntiles, startoffset = data[0], 1
            utiles, endoffset = pb16.unpb16(data, offset=1, npackets=ntiles * 2)
        huffdata = huffnib.huffnibenc(data[startoffset:endoffset])

        # Write compressed data and ancillary data
        huffptr = len(allhuffdata)
        allhuffdata.extend(huffdata)
        extraptr = len(allhuffdata)
        allhuffdata.extend(data[endoffset:])
        filesizes.append(
            (endoffset - startoffset, len(huffdata), len(data) - endoffset)
        )

        # Make pointers
        wramendptr = max(wramptr + endoffset - startoffset, wramendptr)
        entry = (
            os.path.basename(filename), gbcreplace,
            ntiles, huffptr, wramptr, extraptr
        )
        fileoffsets.append(entry)
        if not gbcreplace: wramptr = wramendptr

    uncomp_total = sum(row[0] for row in filesizes)
    huff_total = sum(row[1] for row in filesizes)
    ancillary_total = sum(row[2] for row in filesizes)

    lines = [
        '; generated by allhuffdata.py',
        '; Nibble-wise Huffman decompression is slow: 5 kB/s on Game Boy.',
        '; While the copyright notice is displayed, help decompresses',
        '; up to 6 KiB of data to WRAM for later rapid access.',
        '; Compressed %d bytes to %d' % (uncomp_total, huff_total),
        '; Includes %d bytes of uncompressed ancillary data' % (ancillary_total,),
        'section "huffwram", WRAM0',
        'huffwram: ds %d ' % wramendptr,
        'section "huffdir", ROM0, align[3]',
        'allhuffdata_dir::',
    ]
    for i, (entry, sizes) in enumerate(zip(fileoffsets, filesizes)):
        filename, gbcreplace, ntiles, huffptr, wramptr, extraptr = entry
        uncomp_size, huff_size, extra_size = sizes
        lines.extend([
            "  ; %d: %s" % (i, filename),
            "  db 1  ; replace with next on GBC" if gbcreplace else "  db 0",
            "  db low(%d)" % ntiles,
            "  dw allhuffdata+$%04x  ; %d Huffman bytes"
            % (huffptr, huff_size),
            "  dw huffwram+$%04x     ; decompresses to %d bytes"
            % (wramptr, uncomp_size),
            "  dw allhuffdata+$%04x  ; with %d ancillary bytes"
            % (extraptr, extra_size)
        ])
    lines.append("allhuffdata_dir_end::  ; %d entries" % len(fileoffsets))
    lines.append('section "allhuffdata", ROMX  ; %d bytes' % len(allhuffdata))
    lines.append("allhuffdata:")
    lines.append(rgbasm_bytearray(allhuffdata))
    lines.append("allhuffdata_end::")
    lines.append("")
    lines = "\n".join(lines)
    if outfilename == '-':
        sys.stdout.write(lines)
    else:
        with open(outfilename, "w") as outfp:
            outfp.write(lines)

filenames = [
##    "DMG?", "../obj/gb/Gus_portrait.iu", "../obj/gb/Gus_portrait-GBC.iuc",
##    "../obj/gb/stopwatchface.iu",
##    "../obj/gb/linearity-quadrant.iu",
##    "../obj/gb/sharpness.iu",
    "../obj/gb/stopwatchhand.chrgb.pb16",
    "../obj/gb/stopwatchdigits.chrgb.pb16",
##    "../obj/gb/spritegfx.chrgb.pb16",
##    "../obj/gb/greenhillzone.u.chrgb.pb16",
]
if __name__=='__main__':
    if 'idlelib' in sys.modules:
        argv = [sys.argv[0]]
        argv.extend(filenames)
        main(argv)
    else:
        main()
